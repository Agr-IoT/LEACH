//
// Generated file, do not edit! Created by nedtool 5.6 from inet/routing/leach/LeachPkts.msg.
//

#ifndef __INET_LEACHPKTS_M_H
#define __INET_LEACHPKTS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class LeachControlPkt;
class LeachDataPkt;
class LeachBSPkt;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address

// cplusplus {{
    #include <vector>
    #include "inet/common/INETDefs.h"
    #include "Leach.h"
    #include "inet/networklayer/contract/ipv4/Ipv4Address.h"
    using namespace std;
    using namespace inet;
    
    struct BSObject {
        Ipv4Address nodeAddr;
        Ipv4Address sourceAddr;
        double temperature;
        double humidity;
    }; 
    
    typedef vector<BSObject> testList;
// }}


namespace inet {

/**
 * Enum generated from <tt>inet/routing/leach/LeachPkts.msg:40</tt> by nedtool.
 * <pre>
 * enum LeachPktType
 * {
 *     CH = 1;
 *     NCH = 2;
 *     BS = 3;
 * }
 * </pre>
 */
enum LeachPktType {
    CH = 1,
    NCH = 2,
    BS = 3
};

/**
 * Class generated from <tt>inet/routing/leach/LeachPkts.msg:46</tt> by nedtool.
 * <pre>
 * class LeachControlPkt extends FieldsChunk
 * {
 *     Ipv4Address srcAddress;
 * 
 *     LeachPktType packetType = static_cast<LeachPktType>(-1);
 * }
 * </pre>
 */
class INET_API LeachControlPkt : public ::inet::FieldsChunk
{
  protected:
    Ipv4Address srcAddress;
    inet::LeachPktType packetType = static_cast<LeachPktType>(-1);

  private:
    void copy(const LeachControlPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LeachControlPkt&);

  public:
    LeachControlPkt();
    LeachControlPkt(const LeachControlPkt& other);
    virtual ~LeachControlPkt();
    LeachControlPkt& operator=(const LeachControlPkt& other);
    virtual LeachControlPkt *dup() const override {return new LeachControlPkt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const Ipv4Address& getSrcAddress() const;
    virtual Ipv4Address& getSrcAddressForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<LeachControlPkt*>(this)->getSrcAddress());}
    virtual void setSrcAddress(const Ipv4Address& srcAddress);
    virtual inet::LeachPktType getPacketType() const;
    virtual void setPacketType(inet::LeachPktType packetType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LeachControlPkt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LeachControlPkt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/leach/LeachPkts.msg:52</tt> by nedtool.
 * <pre>
 * class LeachDataPkt extends LeachControlPkt
 * {
 *     double temperature;
 *     double humidity;
 * }
 * </pre>
 */
class INET_API LeachDataPkt : public ::inet::LeachControlPkt
{
  protected:
    double temperature = 0;
    double humidity = 0;

  private:
    void copy(const LeachDataPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LeachDataPkt&);

  public:
    LeachDataPkt();
    LeachDataPkt(const LeachDataPkt& other);
    virtual ~LeachDataPkt();
    LeachDataPkt& operator=(const LeachDataPkt& other);
    virtual LeachDataPkt *dup() const override {return new LeachDataPkt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getTemperature() const;
    virtual void setTemperature(double temperature);
    virtual double getHumidity() const;
    virtual void setHumidity(double humidity);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LeachDataPkt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LeachDataPkt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/leach/LeachPkts.msg:58</tt> by nedtool.
 * <pre>
 * //TODO: implement vector to include individual aggregated data from CHs
 * class LeachBSPkt extends LeachControlPkt
 * {
 *     Ipv4Address CHAddr;
 * }
 * </pre>
 */
class INET_API LeachBSPkt : public ::inet::LeachControlPkt
{
  protected:
    Ipv4Address CHAddr;

  private:
    void copy(const LeachBSPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LeachBSPkt&);

  public:
    LeachBSPkt();
    LeachBSPkt(const LeachBSPkt& other);
    virtual ~LeachBSPkt();
    LeachBSPkt& operator=(const LeachBSPkt& other);
    virtual LeachBSPkt *dup() const override {return new LeachBSPkt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const Ipv4Address& getCHAddr() const;
    virtual Ipv4Address& getCHAddrForUpdate() { handleChange();return const_cast<Ipv4Address&>(const_cast<LeachBSPkt*>(this)->getCHAddr());}
    virtual void setCHAddr(const Ipv4Address& CHAddr);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LeachBSPkt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LeachBSPkt& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_LEACHPKTS_M_H

